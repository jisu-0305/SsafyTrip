<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip.question.mapper.QuestionMapper">

    <!-- 1. 질문 목록 조회 -->
    <!-- (1) 회원 전체 질문 개수   -->
    <select id="getCountQuestions" resultType="int" parameterType="int">
        SELECT COUNT(*)
        FROM questions
        WHERE user_id = #{userId}
    </select>

    <select id="getCountQuestionsForAdmin" resultType="int">
        SELECT COUNT(*)
        FROM questions
    </select>

    <!-- 결과 매핑 정의 -->
    <resultMap id="questionResultMap" type="QuestionsDto">
        <id property="questionId" column="question_id" />
        <result property="title" column="title" />
        <result property="createdAt" column="created_at" />
        <result property="isAnswered" column="is_answered" />
        <result property="questionAuthorEmail" column="member_email"/>
    </resultMap>

    <!-- (2)offset을 통해 특정 페이지의 데이터 가져오기 -->
    <select id="getQuestionsByUserId" resultMap="questionResultMap">
        SELECT question_id, title, created_at, is_answered,
            m.email AS member_email
        FROM questions
        JOIN
             members m ON questions.user_id = m.user_id
        WHERE m.user_id = #{userId}
        ORDER BY created_at DESC
            LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- (3)offset을 통해 관리자용  특정 페이지의 데이터 가져오기 -->
    <select id="getQuestionsByAdmin" resultMap="questionResultMap">
        SELECT question_id, title, created_at, is_answered,
               m.email AS member_email
        FROM questions
        JOIN
             members m ON questions.user_id = m.user_id
        ORDER BY created_at DESC
            LIMIT #{size} OFFSET #{offset}
    </select>


    <!-- 2. 질문 추가  -->
    <insert id="insertQuestion" parameterType="QuestionInsertDto">
        INSERT INTO questions (user_id, title, content)
        VALUES (#{userId}, #{title}, #{content})
    </insert>


    <!-- 3. 특정 조건에 맞는 질문 데이터 조회 -->
    <!-- (1) 답변이 달렸는지 확인하기 -->
    <!-- 특정 질문의 is_answered 값 조회 -->
    <select id="selectIsAnswered" parameterType="map" resultType="boolean">
        SELECT is_answered
        FROM questions
        WHERE question_id = #{questionId};
    </select>


    <!-- (2,3)  -->
    <resultMap id="QuestionAndAnswerResultMap" type="QuestionDetailResDto">
        <!-- 질문 정보 -->
        <result property="questionId" column="question_id" />
        <result property="questionTitle" column="question_title" />
        <result property="questionContent" column="question_content" />
        <result property="questionCreatedAt" column="question_created_at" />
        <result property="questionIsAnswered" column="question_isAnswered" />
        <result property="questionAuthorEmail" column="question_author_email" />

        <!-- 답변 정보 -->
        <result property="answerId" column="answer_id" />
        <result property="answerContent" column="answer_content" />
        <result property="answerCreatedAt" column="answer_created_at" />
        <result property="answerAuthorEmail" column="answer_author_email" />
    </resultMap>

    <!-- (2-1),  답변이 없을 경우(일반 유저), question테이블만 가져오기 -->
    <select id="selectQuestionById" parameterType="map" resultMap="QuestionAndAnswerResultMap">
        SELECT
            q.question_id AS question_id,
            q.title AS question_title,
            q.content AS question_content,
            q.created_at AS question_created_at,
            q.is_answered AS question_isAnswered
        FROM
            questions q
        WHERE
            q.question_id = #{questionId} AND q.user_id = #{userId};
    </select>

    <!-- (2-2),답변이 없을 경우(관리자), question과 질문자 이메일만 가져오기 -->
    <select id="selectQuestionForAdmin" parameterType="map" resultMap="QuestionAndAnswerResultMap">
        SELECT
            q.question_id AS question_id,
            q.title AS question_title,
            q.content AS question_content,
            q.created_at AS question_created_at,
            q.is_answered AS question_isAnswered,
            m.email as question_author_email
        FROM
            questions q
                JOIN
            members m ON q.user_id = m.user_id
        WHERE
            q.question_id = #{questionId};
    </select>


    <!-- (3-1),  답변이 있을 경우(관리자), 전체 가져오기 -->
    <select id="selectQuestionAndAnswerById" parameterType="map" resultMap="QuestionAndAnswerResultMap">
        SELECT
            q.question_id,
            q.title AS question_title,
            q.content AS question_content,
            q.created_at AS question_created_at,
            q.is_answered AS question_isAnswered,
            m.email AS question_author_email,
            a.answer_id,
            a.content AS answer_content,
            a.created_at AS answer_created_at,
            am.email AS answer_author_email
        FROM
            questions q
                JOIN
            members m ON q.user_id = m.user_id
                LEFT JOIN
            answers a ON q.question_id = a.question_id
                LEFT JOIN
            members am ON a.user_id = am.user_id
        WHERE q.question_id = #{questionId} AND m.user_id = #{userId};

    </select>

    <!-- (3-2), 답변이 있을 경우(관리자), 전체 가져오기 -->
    <select id="selectQuestionAndAnswerByIdForAdmin" parameterType="map" resultMap="QuestionAndAnswerResultMap">
        SELECT
            q.question_id,
            q.title AS question_title,
            q.content AS question_content,
            q.created_at AS question_created_at,
            q.is_answered AS question_isAnswered,
            m.email AS question_author_email,
            a.answer_id,
            a.content AS answer_content,
            a.created_at AS answer_created_at,
            am.email AS answer_author_email
        FROM
            questions q
                JOIN
            members m ON q.user_id = m.user_id
                LEFT JOIN
            answers a ON q.question_id = a.question_id
                LEFT JOIN
            members am ON a.user_id = am.user_id
        WHERE q.question_id = #{questionId};

    </select>


    <!-- 4. 답변 추가  -->
    <!-- (1) 답변 삽입 -->
    <insert id="insertAnswer" parameterType="map">
        INSERT INTO answers (question_id, user_id, content)
        VALUES (#{questionId}, #{userId}, #{content});
    </insert>

    <!--(2) 질문 is_answered 업데이트 -->
    <update id="updateQuestionIsAnswered" parameterType="int">
        UPDATE questions
        SET is_answered = TRUE
        WHERE question_id = #{questionId};
    </update>

</mapper>
